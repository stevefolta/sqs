#!/usr/bin/env sqs

import Context
import Codegen


export class ParseNode
	emit(builder)
		fail('Called unimplemented "emit" on {self.class.name}')
	emit-set(value, builder)
		fail('Called unimplemented "emit-set" on {self.class.name}')
	emit-top-level-declarations(builder)
	emit-top-level(builder)
		# This is for functions and class declarations, that need to be at the top
		# level of the C file.
		# Default: nothing to do.
	emit-unwind(builder)
		# Default: most ParseNodes don't use this.
	resolve-names(builder)
		# Default: do nothing.
	resolve-names-autodeclaring(builder)
		# Default: same as resolve-names().
		resolve-names(builder)
	is-settable
		return false
	is-loop
		return false
	dump(level)
		if !level
			level = 0
		print("{indent-spacers.slice(0, level)}{self.class.name}")


export class ClassRef: ParseNode
	(class-statement)
	init(class-statement-in)
		class-statement = class-statement-in
	emit(builder)
		return builder.emit-class-ref(class-statement)
	superclass
		return class-statement.superclass
	name
		return class-statement.name
	get-ivar(name)
		return class-statement.get-ivar(name)
	total-ivars
		return class-statement.total-ivars


export class FunctionRef: ParseNode
	(function-statement)
	init(function-statement-in)
		function-statement = function-statement-in
	num-args
		return function-statement.arguments.size
	emit(builder)
		return builder.emit-function-ref(function-statement)


