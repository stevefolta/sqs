#!/usr/bin/env sqs

import Parser Context CCodegen QBECodegen Runtime Modules Debugging


# Main.

usage = '
Usage: {argv[0]} [option...] <file>

Options (both "option:" and "--option" forms are accepted):
	build-dir: <dir> 	(Where .o files, etc. go.)
	out: <file> 	(The name of the binary; defaults to "a.out")
	-o <file> 	(Same as "out: <file>".)
	--use-qbe | --use-c 	(Compiler backend to use.)
'.strip

build-dir = "build"
cc = env["CC"] || "cc"
cflags = [ "-I{build-dir}/runtime" "-Wno-unused-result" "-g" ]

import Builtins

fn self-compiler-main()
	# Gather the command-line arguments.
	source-file = nil
	next-option = nil
	use-qbe = false
	with dev-null = File("/dev/null", "w")
		use-qbe = run([ "sh" "-c" "command -v qbe" ], { stdout = dev-null, stderr = dev-null }).ok
	out-file = "a.out"
	for arg: argv.slice(1)
		if next-option
			if next-option == "build-dir"
				build-dir = arg
			else if next-option = "out"
				out-file = arg
			next-option = nil
			continue
		option-name = nil
		if arg.ends-with(":")
			option-name = arg.slice(0, -1)
		else if arg.starts-with("--")
			option-name = arg.slice(2)
		else if arg == "-o"
			option-name = "out"
		if option-name
			if option-name == "help"
				print(usage)
				return 0
			else if option-name == "out" || option-name == "build-dir"
				next-option = option-name
				continue
			else if option-name == "use-c"
				use-qbe = false
				continue
			else if option-name == "use-qbe"
				use-qbe = true
				continue
		# Anything else is the source file.
		if source-file
			print("You can only give one source file.")
			print(usage)
			return 1
		source-file = arg
	if !source-file
		print(usage)
		return 1

	# Compile.
	print("Compiling {source-file}...")
	parser = Parser(File(source-file))
	ast = parser.parse-block
	$ mkdir -p {build-dir}
	build(out-file, ast, use-qbe)
	# ast.dump

fn build-main(ast, use-qbe)
	if use-qbe
		with builder = QBEProgramBuilder(GlobalContext(), build-dir)
			builder.emit(ast)
		print("Compiling main.qbe...")
		$ qbe "{build-dir}/main.qbe" -o "{build-dir}/main.qbe.asm"
		$ as "{build-dir}/main.qbe.asm" -o "{build-dir}/main.o"
	else
		with builder = CProgramBuilder(GlobalContext(), build-dir)
			builder.emit(ast)
		print("Compiling main.c...")
		$ {cc} {cflags} -c "{build-dir}/main.c" -o "{build-dir}/main.o"

fn build(out-file, ast, use-qbe)
	link-flags = [ "-lgc" ]

	# Build the runtime first -- main.c will depend on the files existing.
	o-files = build-runtime(build-dir, cflags)

	build-main(ast, use-qbe)

	o-files += [ "{build-dir}/main.o" ]
	print("Linking...")
	$ {cc} {o-files} {link-flags} -o {out-file}


# ParseNodes

import ParseNode
import Block
import Calls



fn dbg(message)
	print(message)

return self-compiler-main()

