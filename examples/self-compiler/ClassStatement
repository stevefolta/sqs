#!/usr/bin/env sqs

import ParseNode Context Codegen Builtins Expressions Calls Debugging


export class ClassStatement: ParseNode
	(name, superclass-name, superclass, ivars, functions, enclosed-classes, generated-name)

	init(name-in)
		name = name-in
		functions = {}
	superclass-name=(new-superclass-name)
		superclass-name = new-superclass-name
	ivars=(new-ivars)
		ivars = new-ivars
	enclosed-classes=(new-enclosed-classes)
		enclosed-classes = new-enclosed-classes
	get-ivar(name)
		if ivars && ivars.contains(name)
			return IvarExpr(name)
		return nil
	ivar-index(name)
		if ivars
			index = 0
			for ivar: ivars
				if ivar == name
					if superclass
						index += superclass.total-ivars
						return index
				index += 1
		if superclass
			return superclass.ivar-index(name)
	total-ivars
		num-ivars = 0
		if superclass
			num-ivars += superclass.total-ivars
		if ivars
			num-ivars += ivars.size
		return num-ivars

	emit-top-level-declarations(builder)
		enclosing-class = builder.cur-class
		builder.cur-class = self
		builder.add-class(self)

		builder.emit-class-declarations(self)

		# Functions & classes.
		for kv: functions
			kv.value.emit-top-level-declarations(builder)
		if enclosed-classes
			for kv: enclosed-classes
				kv.value.emit-top-level-declarations(builder)

		builder.cur-class = enclosing-class

	emit-top-level(builder)
		enclosing-class = builder.cur-class
		builder.cur-class = self

		builder.emit-class-pre-contents(self)

		# Functions & classes.
		for kv: functions
			kv.value.emit-top-level(builder)
		if enclosed-classes
			for kv: enclosed-classes
				kv.value.emit-top-level(builder)

		builder.emit-class-post-contents(self)

		builder.cur-class = enclosing-class

	emit(builder)
		# Everything is emitted in emit-top-level(), and anything referencing the
		# class will use ClassRef, so nothing needs to be done here.

	resolve-names(builder)
		if superclass-name
			superclass = builder.context.find(superclass-name)
			if superclass && superclass.is-a(ClassRef)
				superclass = superclass.class-statement
		if !superclass
			superclass = BuiltinClass(Array.superclass) 	# Object
		builder.push-context(ClassContext(self))
		generated-name = builder.context.generated-prefix(builder)
		for kv: functions
			kv.value.resolve-names(builder)
		builder.pop-context
		if enclosed-classes
			builder.push-context(EnclosedClassContext(self))
			for kv: enclosed-classes
				kv.value.resolve-names(builder)
			builder.pop-context

	parse-key-c-field(line)
		# The first c-field is used for automatically-generated c-fn's.  This is
		# where we get its name from a C declaration.
		# We take the last identifier before the ";" (if there is one).
		field-name-re = Regex(r'(?P<name>[[:alnum:]_]+)[^[:alnum:]_]*;')
		if match = field-name-re.match(line)
			key-c-field = match['name']

	class ClassContext: Context
		(class-statement)
		init(class-statement-in)
			class-statement = class-statement-in

		find(name)
			# Enclosed class.
			enclosed-class = nil
			if class-statement.enclosed-classes
				enclosed-class = class-statement.enclosed-classes[name]
			if enclosed-class
				return ClassRef(enclosed-class)

			# Self-call.
			function = class-statement.functions[name]
			if function
				return CallExpr(SelfExpr(), name)
			# Self-call of super function.
			cur-class = class-statement.superclass
			while cur-class
				# TODO: handle built-in classes somehow...
				if cur-class.is-a(ClassRef)
					cur-class = cur-class.class-statement
				if cur-class.is-a(ClassStatement)
					if cur-class.functions[name]
						return CallExpr(SelfExpr(), name)
				cur-class = cur-class.superclass

			# Ivar.
			ivar = find-ivar(name)
			if ivar
				return ivar

			return parent && parent.find(name)

		generated-prefix(builder)
			return builder.class-prefix(parent, class-statement.name)

		find-ivar(name)
			cur-class = class-statement
			while cur-class
				ivar = cur-class.get-ivar(name)
				if ivar
					return ivar
				cur-class = cur-class.superclass

	class EnclosedClassContext: Context
		(class-statement)
		init(class-statement-in)
			class-statement = class-statement-in

		find(name)
			# Enclosed class.
			enclosed-class = nil
			if class-statement.enclosed-classes
				enclosed-class = class-statement.enclosed-classes[name]
			if enclosed-class
				return ClassRef(enclosed-class)

			return parent && parent.find(name)


class IvarExpr: ParseNode
	(name)
	init(name-in)
		name = name-in
	is-settable
		return true
	emit(builder)
		return builder.emit-ivar-get(name)
	emit-set(value, builder)
		value-loc = value.emit(builder)
		return builder.emit-ivar-set(name, value-loc)

