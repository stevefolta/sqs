#!/usr/bin/env sqs

import Debugging
import FunctionStatement


indent-spacers-string = "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t"

export fn indent-spacers
	return indent-spacers-string
export fn indentation-for(level)
	return indent-spacers-string.slice(0, level)


export class ProgramBuilder
	(context indentation next-temp-num cur-class all-classes unwindings)

	init(context-in)
		context = context-in
		indentation = 0
		next-temp-num = 1
		all-classes = []
		unwindings = []
	close()
	cur-class=(new-class)
		cur-class = new-class
	add-class(new-class)
		all-classes.append(new-class)

	push-context(new-context)
		new-context.parent = context
		context = new-context
		return ContextCloser(self)
	pop-context
		context = context.parent

	virtual
		fail("Internal error: unimplemented virtual function")

	mangle-name(name)
		virtual
	function-prefix(parent-context, name)
		virtual
	class-prefix(parent-context, name)
		virtual

	emit-block-start(block)
		virtual
	emit-block-end(block)
		virtual
	emit-block-unwind(block)
		virtual

	emit-if-statement(statement)
		virtual
	emit-while-statement(statement)
		virtual
	emit-for-statement(statement)
		virtual
	emit-for-statement-variable(statement)
		virtual
	emit-continue
		virtual
	emit-break
		virtual
	emit-return-statement(value-loc)
		virtual
	emit-with-statement(statement)
		virtual
	emit-with-statement-variable(statement)
		virtual
	emit-with-unwind(statement)
		virtual
	emit-run-statement(statement)
		virtual

	emit-call(name, receiver-loc, arg-locs)
		virtual
	emit-super-call(name, receiver-loc, arg-locs)
		virtual
	emit-function-call(fn-loc, arg-locs)
		virtual
	emit-instantiation(class-loc, arg-locs)
		virtual

	emit-local-get(local)
		virtual
	emit-local-set(local, value-loc)
		virtual
	emit-ivar-get(name)
		virtual
	emit-ivar-set(name, value-loc)
		virtual
	emit-argument-get(name)
		virtual
	emit-argument-set(name, value-loc)
		virtual
	emit-upvalue-get(capture-id, index)
		virtual
	emit-upvalue-set(capture-id, index, value-loc)
		virtual

	emit-function-ref(function-statement)
		virtual
	emit-class-ref(class-statement)
		virtual

	emit-short-circuit-expression(expression)
		virtual
	emit-short-circuit-not(expression)
		virtual
	emit-interpolated-string-literal(segments)
		virtual
	emit-run-pipeline(expression)
		virtual
	emit-run-capture(pipeline)
		virtual

	emit-string-literal(value)
		virtual
	emit-int-literal(value)
		virtual
	emit-float-literal(value)
		virtual
	emit-bool-literal(value)
		virtual
	emit-array-literal(items)
		virtual
	emit-dict-literal(items)
		virtual
	emit-nil-literal
		virtual
	emit-self
		virtual

	emit-function(function-statement)
		virtual
	emit-class-declarations(class-statement)
		virtual
	emit-class-pre-contents(class-statement)
		virtual
	emit-class-post-contents(class-statement)
		virtual

	emit-module(module)
		virtual
	emit-module-local-get(module, name)
		virtual
	emit-module-local-set(module, name, value-loc)
		virtual
	emit-module-initialization(module)
		virtual

	emit-builtin-class(name)
		virtual
	emit-builtin-function(name)
		virtual
	emit-builtin-obj-object(name)
		virtual

	class ContextCloser
		(builder)
		init(builder-in)
			builder = builder-in
		close
			builder.pop-context

	# The unwinding stack is a mixture of ParseNodes to unwind to (loops and
	# functions), and ParseNodes that emit unwindings.
	push-unwinding(node)
		unwindings.append(node)
	pop-unwinding(node)
		old-unwinding = unwindings.pop-back
		if node != old-unwinding
			fail("Internal error: mismatched unwinding.")
	emit-unwind-loop
		index = unwindings.size - 1
		while index >= 0
			unwind-point = unwindings[index]
			if unwind-point.is-loop
				break
			unwind-point.emit-unwind(self)
			index -= 1
	emit-unwind-function
		index = unwindings.size - 1
		while index >= 0
			unwind-point = unwindings[index]
			if unwind-point.is-a(FunctionStatement)
				break
			unwind-point.emit-unwind(self)
			index -= 1


