#!/usr/bin/env sqs

import ParseNode, Context, Codegen, FunctionStatement, ClassStatement, Calls
import Debugging

next-capture-id = 1

export class Block: ParseNode
	(statements locals functions classes)
	(capture-id, captured-locals)
	(imported-modules module) 	# If "module" is present, the block *is* a module.
	(generated-id)

	init
		statements = []
	append(statement)
		statements.append(statement)
	add-function(function)
		if !functions
			functions = {}
		functions[function.name] = function
	add-class(class-statement)
		if !classes
			classes = {}
		classes[class-statement.name] = class-statement
	get-local(name)
		return locals && locals[name]
	get-function(name)
		return functions && functions[name]
	get-class(name)
		return classes && classes[name]
	autodeclare(name)
		if !locals
			locals = {}
		local = Local(name)
		locals[name] = local
		return local
	dump(level)
		if !level
			level = 0
		super.dump(level)
		for statement: statements
			statement.dump(level + 1)
	module=(new-module)
		module = new-module
	add-imported-module(module)
		if !imported-modules
			imported-modules = []
		imported-modules.append(module)
	generated-id=(new-generated-id)
		generated-id = new-generated-id

	emit(builder)
		builder.emit-block-start(self)
		for statement: statements
			statement.emit(builder)
		builder.emit-block-end(self)

	emit-top-level-declarations(builder)
		for statement: statements
			statement.emit-top-level-declarations(builder)
	emit-top-level(builder)
		for statement: statements
			statement.emit-top-level(builder)

	emit-unwind(builder)
		builder.emit-block-unwind(self)

	resolve-names(builder)
		if module
			builder.push-context(module.context-for(builder))
		else
			builder.push-context(BlockContext(self))
		for statement: statements
			if statement.is-a(FunctionStatement) || statement.is-a(ClassStatement)
				# Add upvalues to the context.
				builder.push-context(BlockUpvalueContext(self))
				statement.resolve-names(builder)
				builder.pop-context
			else
				statement.resolve-names(builder)
		builder.pop-context

	capture-index(captured-local)
		# Set up captures, if we haven't yet.
		if !captured-locals
			capture-id = next-capture-id
			next-capture-id += 1
			captured-locals = []

		# Find existing index, if there is one.
		index = 0
		for local-name: captured-locals
			if local-name == captured-local.name
				break
			index += 1
		if index >= captured-locals.size
			captured-locals.append(captured-local)
		return index

	find(name)
		expr = get-local(name)
		if expr
			return expr
		function = get-function(name)
		if function
			# Treat it as a nullary function call.  FunctionCallExpr.emit will
			# append arguments if any are given.
			return FunctionCallExpr(FunctionRef(function), [])
		class-statement = get-class(name)
		if class-statement
			return ClassRef(class-statement)
		if imported-modules
			for module: imported-modules
				if imported-item = module.get-export(name)
					return imported-item

	class BlockContext: Context
		(block)

		init(block-in)
			block = block-in
		find(name)
			expr = block.find(name)
			if expr
				return expr
			return parent && parent.find(name)
		find-autodeclaring(name)
			# Already declared here?
			expr = block.find(name)
			if expr
				return expr
			# Not declared here, search up the chain.
			expr = parent && parent.find(name)
			if expr
				return expr
			# Doesn't exist, so autodeclare it.
			return block.autodeclare(name)

	class BlockUpvalueContext: Context
		(block)

		init(block-in)
			block = block-in
		find(name)
			node = parent.find(name)
			if node && node.is-a(Local)
				# It's a local in the block's method, turn it into an upvalue.
				# If it were a local in an enclosing method, it would already be an
				# UpvalueLocal.
				node.is-captured = true
				node = UpvalueLocal(block, node)
			return node

	class UpvalueLocal: ParseNode
		(block, index)

		init(block-in, captured-local)
			block = block-in
			index = block.capture-index(captured-local)
		emit(builder)
			return builder.emit-upvalue-get(block.capture-id, index)
		emit-set(value, builder)
			value-loc = value.emit(builder)
			return builder.emit-upvalue-set(block.capture-id, index, value-loc)


class Local: ParseNode
	(name is-captured generated)

	init(name-in)
		name = name-in
	is-captured=(value)
		is-captured = value
	generated=(new-generated)
		generated = new-generated
	is-settable
		return true
	emit(builder)
		return builder.emit-local-get(self)
	emit-set(value, builder)
		value-loc = value.emit(builder)
		return builder.emit-local-set(self, value-loc)

