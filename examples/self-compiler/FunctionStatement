#!/usr/bin/env sqs

import ParseNode, Context, Codegen, Debugging


export class FunctionStatement: ParseNode
	(name arguments body generated-name)

	init(name-in)
		name = name-in
	arguments=(new-arguments)
		arguments = new-arguments
	body=(new-body)
		body = new-body

	resolve-names(builder)
		context = FunctionContext(self)
		builder.push-context(context)
		generated-name = context.generated-prefix(builder)
		if body
			body.resolve-names(builder)
		builder.pop-context

	emit-top-level-declarations(builder)
		if body
			body.emit-top-level-declarations(builder)
	emit-top-level(builder)
		if body
			body.emit-top-level(builder)
		builder.emit-function(self)

	emit(builder)
		# Everything is emitted in emit-top-level(), and anything referencing the
		# function will use FunctionRef, so nothing needs to be done here.

	class FunctionContext: Context
		(function-statement)
		init(function-statement-in)
			function-statement = function-statement-in
		find(name)
			if function-statement.arguments
				if function-statement.arguments.contains(name)
					return FunctionArgument(name)
			return parent && parent.find(name)
		generated-prefix(builder)
			return builder.function-prefix(parent, function-statement.name)

	class FunctionArgument: ParseNode
		(name)
		init(name-in)
			name = name-in
		emit(builder)
			return builder.emit-argument-get(name)
		emit-set(value, builder)
			value-loc = value.emit(builder)
			return builder.emit-argument-set(name, value-loc)


