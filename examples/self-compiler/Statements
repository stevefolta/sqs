#!/usr/bin/env sqs

import ParseNode Context Codegen
import Debugging


export class IfStatement: ParseNode
	(condition if-block else-block)

	init(condition-in)
		condition = condition-in
	if-block=(new-if-block)
		if-block = new-if-block
	else-block=(new-else-block)
		else-block = new-else-block

	resolve-names(builder)
		condition.resolve-names(builder)
		if if-block
			if-block.resolve-names(builder)
		if else-block
			else-block.resolve-names(builder)
	emit(builder)
		builder.emit-if-statement(self)
	emit-top-level-declarations(builder)
		if if-block
			if-block.emit-top-level-declarations(builder)
		if else-block
			else-block.emit-top-level-declarations(builder)
	emit-top-level(builder)
		if if-block
			if-block.emit-top-level(builder)
		if else-block
			else-block.emit-top-level(builder)

export class WhileStatement: ParseNode
	(condition body)

	condition=(new-condition)
		condition = new-condition
	body=(new-body)
		body = new-body
	is-loop
		return true

	resolve-names(builder)
		condition.resolve-names(builder)
		if body
			body.resolve-names(builder)
	emit(builder)
		builder.emit-while-statement(self)
	emit-top-level-declarations(builder)
		if body
			body.emit-top-level-declarations(builder)
	emit-top-level(builder)
		if body
			body.emit-top-level(builder)

export class ForStatement: ParseNode
	(variable-name collection body generated)

	init(name)
		variable-name = name
	collection=(new-collection)
		collection = new-collection
	body=(new-body)
		body = new-body
	generated=(value)
		generated = value
	is-loop
		return true

	resolve-names(builder)
		builder.push-context(ForStatementContext(self))
		collection.resolve-names(builder)
		if body
			body.resolve-names(builder)
		builder.pop-context
	emit(builder)
		builder.emit-for-statement(self)
	emit-top-level-declarations(builder)
		if body
			body.emit-top-level-declarations(builder)
	emit-top-level(builder)
		if body
			body.emit-top-level(builder)

	class ForStatementContext: Context
		(statement)
		init(statement-in)
			statement = statement-in
		find(name)
			if name == statement.variable-name
				return ForStatementVariable(statement)
			return parent.find(name)

	class ForStatementVariable: ParseNode
		(statement)
		init(statement-in)
			statement = statement-in
		emit(builder)
			return builder.emit-for-statement-variable(statement)

export class ContinueStatement: ParseNode
	emit(builder)
		builder.emit-continue(self)
export class BreakStatement: ParseNode
	emit(builder)
		builder.emit-break(self)

export class ReturnStatement: ParseNode
	(value)

	value=(new-value)
		value = new-value
	resolve-names(builder)
		if value
			value.resolve-names(builder)
	emit(builder)
		value-loc = value && value.emit(builder)
		builder.emit-return-statement(value-loc)

export class WithStatement: ParseNode
	(name expr body unwind-loc)

	init(name-in, expr-in, body-in)
		name = name-in
		expr = expr-in
		body = body-in
	unwind-loc=(new-unwind-loc)
		unwind-loc = new-unwind-loc

	resolve-names(builder)
		builder.push-context(WithStatementContext(self))
		expr.resolve-names(builder)
		if body
			body.resolve-names(builder)
		builder.pop-context

	emit(builder)
		builder.emit-with-statement(self)

	emit-top-level-declarations(builder)
		if body
			body.emit-top-level-declarations(builder)
	emit-top-level(builder)
		if body
			body.emit-top-level(builder)

	emit-unwind(builder)
		builder.emit-with-unwind(self)

	class WithStatementContext: Context
		(with-statement)
		init(with-statement-in)
			with-statement = with-statement-in
		find(name)
			if name == with-statement.name
				return WithStatementVariable(with-statement)
			return parent && parent.find(name)

	class WithStatementVariable: ParseNode
		(with-statement)
		init(with-statement-in)
			with-statement = with-statement-in
		emit(builder)
			return builder.emit-with-statement-variable(with-statement)


export class RunCommand: ParseNode
	(arguments in-pipe-loc out-pipe-loc capture)
	init(arguments-in)
		arguments = arguments-in
	in-pipe-loc=(new-in-pipe-loc)
		in-pipe-loc = new-in-pipe-loc
	out-pipe-loc=(new-out-pipe-loc)
		out-pipe-loc = new-out-pipe-loc
	capture=(new-capture)
		capture = new-capture

	resolve-names(builder)
		for arg: arguments
			arg.resolve-names(builder)
	
	emit(builder)
		return builder.emit-run-statement(self)

