#!/usr/bin/env sqs

import ParseNode Codegen Debugging


export class Variable: ParseNode
	(name where resolved)

	init(name-in, where-in)
		name = name-in
		where = where-in
	is-settable
		return true
	resolve-names(builder)
		if !resolved
			resolved = builder.context.find(name)
			if !resolved
				fail('Couldn\'t find "{name}" {where}')
	resolve-names-autodeclaring(builder)
		if !resolved
			resolved = builder.context.find-autodeclaring(name)
			if !resolved
				# Probably won't happen, because of the autodeclaration.
				fail('Couldn\'t find "{name}" {where}')
	emit(builder)
		return resolved.emit(builder)
	emit-set(value, builder)
		return resolved.emit-set(value, builder)


export class SetExpr: ParseNode
	(left right)

	init(left-in, right-in)
		left = left-in
		right = right-in
	emit(builder)
		return left.emit-set(right, builder)
	resolve-names(builder)
		left.resolve-names-autodeclaring(builder)
		right.resolve-names(builder)


export class NilLiteral: ParseNode
	emit(builder)
		return builder.emit-nil-literal()

export class SelfExpr: ParseNode
	emit(builder)
		return builder.emit-self()


export class ShortCircuitExpression: ParseNode
	(expr1 expr2 is-and)

	init(expr1-in, expr2-in, is-and-in)
		expr1 = expr1-in
		expr2 = expr2-in
		is-and = is-and-in
	resolve-names(builder)
		expr1.resolve-names(builder)
		expr2.resolve-names(builder)
	emit(builder)
		return builder.emit-short-circuit-expression(self)


export class ShortCircuitNot: ParseNode
	(expr)

	init(expr-in)
		expr = expr-in
	resolve-names(builder)
		expr.resolve-names(builder)
	emit(builder)
		return builder.emit-short-circuit-not(self)

export class StringLiteralExpr: ParseNode
	(value)

	init(value-in)
		value = value-in
	append(more-text)
		value += more-text
	emit(builder)
		return builder.emit-string-literal(value)

export class IntLiteralExpr: ParseNode
	(value)

	init(value-str)
		value = Int(value-str)
	emit(builder)
		return builder.emit-int-literal(value)

export class FloatLiteralExpr: ParseNode
	(value)
	init(value-str)
		value = Float(value-str)
	emit(builder)
		return builder.emit-float-literal(value)

export class BooleanLiteral: ParseNode
	(value)

	init(value-in)
		value = value-in
	emit(builder)
		return builder.emit-bool-literal(value)

export class InterpolatedStringLiteral: ParseNode
	(segments)

	init(segments-in)
		segments = segments-in
	resolve-names(builder)
		for segment: segments
			segment.resolve-names(builder)
	emit(builder)
		return builder.emit-interpolated-string-literal(segments)

export class ArrayLiteral: ParseNode
	(items)

	init
		items = []
	add-item(item)
		items.append(item)
	resolve-names(builder)
		for item: items
			item.resolve-names(builder)
	emit(builder)
		return builder.emit-array-literal(items)

export class DictLiteral: ParseNode
	(items)

	init
		items = {}
	add-item(key, value)
		items[key] = value
	resolve-names(builder)
		for kv: items
			kv.value.resolve-names(builder)
	emit(builder)
		return builder.emit-dict-literal(items)


export class RunPipeline: ParseNode
	(commands capture)
	init
		commands = []
	capture=(new-capture)
		capture = new-capture

	resolve-names(builder)
		for command: commands
			command.resolve-names(builder)

	emit(builder)
		return builder.emit-run-pipeline(self)


export class RunCapture: ParseNode
	(pipeline)
	init(pipeline-in)
		pipeline = pipeline-in
		pipeline.capture = true

	resolve-names(builder)
		pipeline.resolve-names(builder)

	emit(builder)
		return builder.emit-run-capture(pipeline)



