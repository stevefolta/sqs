#!/usr/bin/env sqs

import ParseNode Context Debugging

export class BuiltinClass: ParseNode
	(builtin-class)
	init(builtin-class-in)
		builtin-class = builtin-class-in
	emit(builder)
		return builder.emit-builtin-class(builtin-class.name)
	superclass
		the-superclass = builtin-class.superclass
		return the-superclass && BuiltinClass(the-superclass)
	get-ivar(name)
		# The built-in classes don't expose their ivars directly by name.
		return nil
	total-ivars
		return builtin-class.num-ivars
	name
		return builtin-class.name
	generated-name
		return builtin-class.name


builtin-class-objects = [
	# Object, Class: these are not exposed by sqs by name.
	Array.superclass, Array.class.class,
	Int, Float, Array, Dict,
	ByteArray, File, Pipe, Regex, Path,
	]
builtin-classes = {}
for the-class: builtin-class-objects
	builtin-classes[the-class.name] = the-class
builtin-fns = {
	print: "Print", run: "Run", fail: "Fail", glob: "Glob", sleep: "Sleep",
	getpid: "Getpid", cwd: "Get_cwd", chdir: "Chdir", rename: "Rename",
	}


export class BuiltinFunction: ParseNode
	(c-name)
	init(c-name-in)
		c-name = c-name-in
	emit(builder)
		return builder.emit-builtin-function(c-name)

export class BuiltinObjObject: ParseNode
	(name)
	init(name-in)
		name = name-in
	emit(builder)
		return builder.emit-builtin-obj-object(name)


export class GlobalContext: Context
	find(name)
		builtin-class = builtin-classes[name]
		if builtin-class
			return BuiltinClass(builtin-class)
		c-name = builtin-fns[name]
		if c-name
			return BuiltinFunction(c-name)
		if [ "env", "argv" ].contains(name)
			return BuiltinObjObject(name)
		return nil

